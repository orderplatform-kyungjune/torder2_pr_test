name: CI/CD development

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'branch to deploy'
        required: true
        default: 'develop'
        type: string
      label:
        description: 'label to deploy'
        required: true
        default: 'TORDER'
        type: choice
        options:
          - ALL
          - TORDER

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.check_branch.outputs.sha }}
    steps:
      # 입력한 브랜치 존재 여부 확인 및 commit sha 저장
      - name: check if branch exists
        id: check_branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT_PAT }}
          script: |
            const { data: branch } = await github.request('GET /repos/{owner}/{repo}/branches/{branch}', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: '${{ github.event.inputs.branch }}'
            });

            if (branch) {
              core.setOutput('sha', branch.commit.sha);
            }

      # 선택한 브랜치로 체크아웃
      - name: check out branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      # 노드 버전 세팅
      - name: setup node version
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      # pnpm 설치
      - name: install pnpm
        run: npm install -g pnpm@8.4.0

      # node_modules 캐시 복원
      - name: restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            package/remake/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}

      # node_modules 설치
      - name: install dependencies
        run: pnpm install

      # node_modules 캐시 저장
      - name: save node_modules cache
        uses: actions/cache/save@v4
        with:
          path: |
            node_modules
            package/remake/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}

  #---------------------------------- torder
  build_torder:
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event.inputs.label == 'TORDER' || github.event.inputs.label == 'ALL' }}
    outputs:
      sha: ${{ needs.setup.outputs.sha }}
    steps:
      # 선택한 브랜치로 체크아웃
      - name: check out branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      # node_modules 캐시 복원
      - name: restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            package/remake/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}

      # pnpm 설치
      - name: install pnpm
        run: npm install -g pnpm@8.4.0


      # build
      - name: build TORDER
        run: |
          echo "building for TORDER"
          pnpm torder:build:dev

      # dist 폴더 캐시 저장
      - name: save dist cache
        uses: actions/cache/save@v4
        with:
          path: package/remake/dist
          key: torder-dist-${{ runner.os }}-${{ needs.setup.outputs.sha }}-${{ github.workflow }}

  deploy_torder:
    runs-on: ubuntu-latest
    needs: build_torder
    steps:
      # 선택한 브랜치로 체크아웃
      - name: check out branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      # node_modules 캐시 복원
      - name: restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            package/remake/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}

      # dist 폴더 캐시 복원
      - name: restore dist cache
        uses: actions/cache/restore@v4
        with:
          path: package/remake/dist
          key: torder-dist-${{ runner.os }}-${{ needs.build_torder.outputs.sha }}-${{ github.workflow }}

      # pnpm 설치
      - name: install pnpm
        run: npm install -g pnpm@8.4.0

      # 배포
      - name: deploy TORDER
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_DEV_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "deploying to TORDER"
          pnpm torder:deploy:action
